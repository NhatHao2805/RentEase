<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Aardvark.Base.FSharp</name></assembly>
<members>
<member name="M:Aardvark.Base.StringExtensions.NormalizeLineEndings(System.String)">
<summary>
 Replaces all newline sequences in the current string with Environment.NewLine.
</summary>
</member>
<member name="M:Aardvark.Base.StringExtensions.NormalizeLineEndings(System.String,System.String)">
<summary>
 Replaces all newline sequences in the current string with replacementText.
</summary>
</member>
<member name="P:Aardvark.Base.Traceable`2.tcollapse">
<summary>
 determines whether or not a history should be pruned although it is still referntiable.
 the first argument is the base-state for that history and the second argument is the number
 of ops that would need to be applied.
 when returning true the history implementation will discard the history and reproduce it on demand using
 the above compute function.
</summary>
</member>
<member name="P:Aardvark.Base.Traceable`2.tcompute">
<summary>
 differentiates two states and returns the needed ops
</summary>
</member>
<member name="P:Aardvark.Base.Traceable`2.tapply">
<summary>
 applies the given operations to the state and 
 returns the new state accompanied by (possibly) reduced ops (removing useless ops)
</summary>
</member>
<member name="P:Aardvark.Base.Traceable`2.tempty">
<summary>
 the empty state
</summary>
</member>
<member name="P:Aardvark.Base.Traceable`2.tops">
<summary>
 the monoid instance for &apos;ops
</summary>
</member>
<member name="P:Aardvark.Base.Monoid`1.mappend">
<summary>
 appends to values
</summary>
</member>
<member name="P:Aardvark.Base.Monoid`1.mempty">
<summary>
 the empty element
</summary>
</member>
<member name="P:Aardvark.Base.Monoid`1.misEmpty">
<summary>
 determines whether the given value is empty
</summary>
</member>
<member name="P:Aardvark.Base.AverageWindow.Value">
<summary>
 Returns the average of the last N inserted values.
</summary>
</member>
<member name="P:Aardvark.Base.AverageWindow.Count">
<summary>
 The number of currently inserted values.
</summary>
</member>
<member name="M:Aardvark.Base.AverageWindow.Reset">
<summary>
 Resets the average window.
</summary>
</member>
<member name="M:Aardvark.Base.AverageWindow.Insert(System.Double)">
<summary>
 Insert a new value to the sequence and returns the average of the last N values.
</summary>
</member>
<member name="T:Aardvark.Base.AverageWindow">
<summary>
 Represents a moving average window of a sequence.
 It builds the average of the last N inserted values.
</summary>
</member>
<member name="P:Aardvark.Base.ReferenceCountingSet`1.Count">
 <summary>
 returns the number of (distinct) elements contained in
 the set.
 </summary>
</member>
<member name="M:Aardvark.Base.ReferenceCountingSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
 <summary>
 Take the union of this set with other. Modifies this set.
 </summary>
</member>
<member name="M:Aardvark.Base.ReferenceCountingSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
 <summary>
 Takes symmetric difference (XOR) with other and this set. Modifies this set.
 </summary>
</member>
<member name="M:Aardvark.Base.ReferenceCountingSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
 <summary>
 determines if the set is equal (set) to the given sequence
 </summary>
</member>
<member name="M:Aardvark.Base.ReferenceCountingSet`1.Remove(`0)">
 <summary>
 removes an element from the ReferenceCountingSet and returns
 true if the element is no longer contained after the operation.
 </summary>
</member>
<member name="M:Aardvark.Base.ReferenceCountingSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
 <summary>
 determines if the set and the given sequence overlap
 </summary>
</member>
<member name="M:Aardvark.Base.ReferenceCountingSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
 <summary>
 determines if the set is a superset of the given sequence
 </summary>
</member>
<member name="M:Aardvark.Base.ReferenceCountingSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
 <summary>
 determines if the set is a subset of the given sequence
 </summary>
</member>
<member name="M:Aardvark.Base.ReferenceCountingSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
 <summary>
 determines if the set is a proper superset of the given sequence
 </summary>
</member>
<member name="M:Aardvark.Base.ReferenceCountingSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
 <summary>
 determines if the set is a proper subset of the given sequence
 </summary>
</member>
<member name="M:Aardvark.Base.ReferenceCountingSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
 <summary>
 Takes the intersection of this set with other. Modifies this set.
 </summary>
</member>
<member name="M:Aardvark.Base.ReferenceCountingSet`1.GetReferenceCount``1(``0)">
 <summary>
 gets the current reference count for the given element
 </summary>
</member>
<member name="M:Aardvark.Base.ReferenceCountingSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
 <summary>
 Remove items in other from this set. Modifies this set.
 </summary>
</member>
<member name="M:Aardvark.Base.ReferenceCountingSet`1.Contains(`0)">
 <summary>
 checks if the set contains a specific element
 </summary>
</member>
<member name="M:Aardvark.Base.ReferenceCountingSet`1.Clear">
 <summary>
 clears the entire set
 </summary>
</member>
<member name="M:Aardvark.Base.ReferenceCountingSet`1.Add(`0)">
 <summary>
 adds an element to the ReferenceCountingSet and returns
 true if the element was not contained in the set before
 this operation.
 </summary>
</member>
<member name="T:Aardvark.Base.ReferenceCountingSet`1">
 <summary>
 represents a set of elements having a reference count.
 this means that an element is contained when it has been
 added at least once more than removed.
 </summary>
</member>
<member name="T:Aardvark.Base.Measure`2">
<summary>
 Measure represents a monoidal measure for the given type &apos;a 
 where &apos;m has to fulfill monoid laws:
     1) identity element:    a &lt;*&gt; mempty = mempty &lt;*&gt; a = a
     2) associativity:       (a &lt;*&gt; b) &lt;&gt; c = a &lt;*&gt; (b &lt;*&gt; c)
</summary>
</member>
<member name="P:Aardvark.Base.RangeSet1ul.Range">
<summary>
 Returns the total range spanned by the range set, i.e. [min, max].
</summary>
</member>
<member name="P:Aardvark.Base.RangeSet1ul.Min">
<summary>
 Returns the minimum value in the range set or UInt64.MaxValue if the range is empty.
</summary>
</member>
<member name="P:Aardvark.Base.RangeSet1ul.Max">
<summary>
 Returns the maximum value in the range set or UInt64.MinValue if the range is empty.
</summary>
</member>
<member name="P:Aardvark.Base.RangeSet1ul.IsEmpty">
<summary>
 Returns whether the set is empty.
</summary>
</member>
<member name="P:Aardvark.Base.RangeSet1ul.Empty">
<summary>
 Empty range set.
</summary>
</member>
<member name="P:Aardvark.Base.RangeSet1ul.Count">
<summary>
 Returns the number of disjoint ranges in the set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ul.Union(Aardvark.Base.RangeSet1ul)">
<summary>
 Returns the union of the set with the given set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ul.ToSeq">
<summary>
 Views the range set as a sequence.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ul.ToList">
<summary>
 Builds a list from the range set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ul.ToArray">
<summary>
 Builds an array from the range set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ul.Remove(Aardvark.Base.Range1ul)">
<summary>
 Removes the given range from the set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ul.Intersect(Aardvark.Base.Range1ul)">
<summary>
 Returns the intersection of the set with the given range.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ul.Contains(Aardvark.Base.Range1ul)">
<summary>
 Returns whether the given range is contained in the set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ul.Contains(System.UInt64)">
<summary>
 Returns whether the given value is contained in the range set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ul.Add(Aardvark.Base.Range1ul)">
<summary>
 Adds the given range to the set.
</summary>
</member>
<member name="T:Aardvark.Base.RangeSet1ul">
<summary>
 Set of ranges where overlapping and neighboring ranges are coalesced.
 Note that ranges describe closed intervals.
</summary>
</member>
<member name="P:Aardvark.Base.RangeSet1l.Range">
<summary>
 Returns the total range spanned by the range set, i.e. [min, max].
</summary>
</member>
<member name="P:Aardvark.Base.RangeSet1l.Min">
<summary>
 Returns the minimum value in the range set or Int64.MaxValue if the range is empty.
</summary>
</member>
<member name="P:Aardvark.Base.RangeSet1l.Max">
<summary>
 Returns the maximum value in the range set or Int64.MinValue if the range is empty.
</summary>
</member>
<member name="P:Aardvark.Base.RangeSet1l.IsEmpty">
<summary>
 Returns whether the set is empty.
</summary>
</member>
<member name="P:Aardvark.Base.RangeSet1l.Empty">
<summary>
 Empty range set.
</summary>
</member>
<member name="P:Aardvark.Base.RangeSet1l.Count">
<summary>
 Returns the number of disjoint ranges in the set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1l.Union(Aardvark.Base.RangeSet1l)">
<summary>
 Returns the union of the set with the given set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1l.ToSeq">
<summary>
 Views the range set as a sequence.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1l.ToList">
<summary>
 Builds a list from the range set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1l.ToArray">
<summary>
 Builds an array from the range set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1l.Remove(Aardvark.Base.Range1l)">
<summary>
 Removes the given range from the set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1l.Intersect(Aardvark.Base.Range1l)">
<summary>
 Returns the intersection of the set with the given range.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1l.Contains(Aardvark.Base.Range1l)">
<summary>
 Returns whether the given range is contained in the set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1l.Contains(System.Int64)">
<summary>
 Returns whether the given value is contained in the range set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1l.Add(Aardvark.Base.Range1l)">
<summary>
 Adds the given range to the set.
</summary>
</member>
<member name="T:Aardvark.Base.RangeSet1l">
<summary>
 Set of ranges where overlapping and neighboring ranges are coalesced.
 Note that ranges describe closed intervals.
</summary>
</member>
<member name="P:Aardvark.Base.RangeSet1ui.Range">
<summary>
 Returns the total range spanned by the range set, i.e. [min, max].
</summary>
</member>
<member name="P:Aardvark.Base.RangeSet1ui.Min">
<summary>
 Returns the minimum value in the range set or UInt32.MaxValue if the range is empty.
</summary>
</member>
<member name="P:Aardvark.Base.RangeSet1ui.Max">
<summary>
 Returns the maximum value in the range set or UInt32.MinValue if the range is empty.
</summary>
</member>
<member name="P:Aardvark.Base.RangeSet1ui.IsEmpty">
<summary>
 Returns whether the set is empty.
</summary>
</member>
<member name="P:Aardvark.Base.RangeSet1ui.Empty">
<summary>
 Empty range set.
</summary>
</member>
<member name="P:Aardvark.Base.RangeSet1ui.Count">
<summary>
 Returns the number of disjoint ranges in the set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ui.Union(Aardvark.Base.RangeSet1ui)">
<summary>
 Returns the union of the set with the given set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ui.ToSeq">
<summary>
 Views the range set as a sequence.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ui.ToList">
<summary>
 Builds a list from the range set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ui.ToArray">
<summary>
 Builds an array from the range set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ui.Remove(Aardvark.Base.Range1ui)">
<summary>
 Removes the given range from the set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ui.Intersect(Aardvark.Base.Range1ui)">
<summary>
 Returns the intersection of the set with the given range.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ui.Contains(Aardvark.Base.Range1ui)">
<summary>
 Returns whether the given range is contained in the set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ui.Contains(System.UInt32)">
<summary>
 Returns whether the given value is contained in the range set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ui.Add(Aardvark.Base.Range1ui)">
<summary>
 Adds the given range to the set.
</summary>
</member>
<member name="T:Aardvark.Base.RangeSet1ui">
<summary>
 Set of ranges where overlapping and neighboring ranges are coalesced.
 Note that ranges describe closed intervals.
</summary>
</member>
<member name="P:Aardvark.Base.RangeSet1i.Range">
<summary>
 Returns the total range spanned by the range set, i.e. [min, max].
</summary>
</member>
<member name="P:Aardvark.Base.RangeSet1i.Min">
<summary>
 Returns the minimum value in the range set or Int32.MaxValue if the range is empty.
</summary>
</member>
<member name="P:Aardvark.Base.RangeSet1i.Max">
<summary>
 Returns the maximum value in the range set or Int32.MinValue if the range is empty.
</summary>
</member>
<member name="P:Aardvark.Base.RangeSet1i.IsEmpty">
<summary>
 Returns whether the set is empty.
</summary>
</member>
<member name="P:Aardvark.Base.RangeSet1i.Empty">
<summary>
 Empty range set.
</summary>
</member>
<member name="P:Aardvark.Base.RangeSet1i.Count">
<summary>
 Returns the number of disjoint ranges in the set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1i.Union(Aardvark.Base.RangeSet1i)">
<summary>
 Returns the union of the set with the given set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1i.ToSeq">
<summary>
 Views the range set as a sequence.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1i.ToList">
<summary>
 Builds a list from the range set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1i.ToArray">
<summary>
 Builds an array from the range set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1i.Remove(Aardvark.Base.Range1i)">
<summary>
 Removes the given range from the set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1i.Intersect(Aardvark.Base.Range1i)">
<summary>
 Returns the intersection of the set with the given range.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1i.Contains(Aardvark.Base.Range1i)">
<summary>
 Returns whether the given range is contained in the set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1i.Contains(System.Int32)">
<summary>
 Returns whether the given value is contained in the range set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1i.Add(Aardvark.Base.Range1i)">
<summary>
 Adds the given range to the set.
</summary>
</member>
<member name="T:Aardvark.Base.RangeSet1i">
<summary>
 Set of ranges where overlapping and neighboring ranges are coalesced.
 Note that ranges describe closed intervals.
</summary>
</member>
<member name="M:Aardvark.Base.InheritanceTypeExtensions.TopologicalSort(System.Collections.Generic.IEnumerable{System.Type})">
<summary>
 topologically sorts the given types (from most specific to obj)
</summary>
</member>
<member name="M:Aardvark.Base.InheritanceTypeExtensions.SubstituteParameters(System.Type,Microsoft.FSharp.Core.FSharpFunc{System.Type,System.Type})">
<summary>
 Replaces all generic parameters using the given mapping.
</summary>
</member>
<member name="M:Aardvark.Base.InheritanceTypeExtensions.Substitute(System.Type,System.Type,System.Type)">
<summary>
 Replaces all occurences of p in x with v
</summary>
</member>
<member name="M:Aardvark.Base.InheritanceTypeExtensions.GetBaseTypesAndSelf(System.Type)">
<summary>
 Gets the type&apos;s base-types (including interfaces) in topological order (from most specific to obj)
</summary>
</member>
<member name="M:Aardvark.Base.InheritanceTypeExtensions.GetBaseTypes(System.Type)">
<summary>
 Gets the type&apos;s base-types (including interfaces) in topological order (from most specific to obj)
</summary>
</member>
<member name="M:Aardvark.Base.EnumExtensions.Enum.convert``2(``0)">
<summary>
 Converts the given value to an enumeration type.
 The input value must be an enumeration type or convertible to the underlying target enumeration type.
 If the value is not defined for the target enumeration, an InvalidCastException is thrown.
</summary>
</member>
<member name="M:Aardvark.Base.NiceUtilities.LookupTable.tryLookupV``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})">
<summary>
 Builds a lookup table from the given entries and returns a function that retrieves the value associated with a key if it exists.
 Fails if a key occurs more than once in the input collection.
</summary>
</member>
<member name="M:Aardvark.Base.NiceUtilities.LookupTable.tryLookup``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})">
<summary>
 Builds a lookup table from the given entries and returns a function that retrieves the value associated with a key if it exists.
 Fails if a key occurs more than once in the input collection.
</summary>
</member>
<member name="M:Aardvark.Base.NiceUtilities.LookupTable.lookup``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})">
<summary>
 Builds a lookup table from the given entries and returns a function that retrieves the value associated with a key.
 Fails if a key occurs more than once in the input collection.
</summary>
</member>
<member name="M:Aardvark.Base.Prelude.ReferenceEquality.op_BangEquals``1(``0,``0)">
<summary>
 Reference inequality
</summary>
</member>
<member name="M:Aardvark.Base.Prelude.ReferenceEquality.op_EqualsEquals``1(``0,``0)">
<summary>
 Reference equality
</summary>
</member>
<member name="M:Aardvark.Base.Prelude.NativePtr.temp``2(Microsoft.FSharp.Core.FSharpFunc{``0*,``1})">
<summary>
 Allocates a temporary native pointer and invokes the action.
</summary>
</member>
<member name="M:Aardvark.Base.Prelude.NativePtr.pinArri``2(Microsoft.FSharp.Core.FSharpFunc{``0*,``1},System.Int32,``0[])">
<summary>
 Pins the given array at the given index and invokes the action with the native pointer.
</summary>
</member>
<member name="M:Aardvark.Base.Prelude.NativePtr.pinArr``2(Microsoft.FSharp.Core.FSharpFunc{``0*,``1},``0[])">
<summary>
 Pins the given array and invokes the action with the native pointer.
</summary>
</member>
<member name="M:Aardvark.Base.Prelude.NativePtr.pin``2(Microsoft.FSharp.Core.FSharpFunc{``0*,``1},``0)">
<summary>
 Pins the given value and invokes the action with the native pointer.
 Note: Use a fixed expression with a byref if writing to the original location is required.
</summary>
</member>
<member name="M:Aardvark.Base.Prelude.Array.stableSum(System.Double[])">
<summary>
 Computes the sum of the given array using the Kahan summation algorithm.
</summary>
</member>
<member name="M:Aardvark.Base.Prelude.Array.stableSumBy``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Double},``0[])">
<summary>
 Computes the sum of the given array using the Kahan summation algorithm.
</summary>
</member>
<member name="M:Aardvark.Base.Prelude.List.stableSum(Microsoft.FSharp.Collections.FSharpList{System.Double})">
<summary>
 Computes the sum of the given list using the Kahan summation algorithm.
</summary>
</member>
<member name="M:Aardvark.Base.Prelude.List.stableSumBy``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Double},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Computes the sum of the given list using the Kahan summation algorithm.
</summary>
</member>
<member name="M:Aardvark.Base.Prelude.List.intersperse``1(``0,Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Inserts a separator in between the elements of the given list.
</summary>
</member>
<member name="M:Aardvark.Base.Prelude.Seq.stableSum(System.Collections.Generic.IEnumerable{System.Double})">
<summary>
 Computes the sum of the given sequence using the Kahan summation algorithm.
</summary>
</member>
<member name="M:Aardvark.Base.Prelude.Seq.stableSumBy``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Double},System.Collections.Generic.IEnumerable{``0})">
<summary>
 Computes the sum of the given sequence using the Kahan summation algorithm.
</summary>
</member>
<member name="M:Aardvark.Base.String Extensions.String.replace(System.String,System.String,System.String)">
<summary>
 Replaces all occurrences of the pattern with the replacement string.
</summary>
</member>
<member name="M:Aardvark.Base.String Extensions.String.trim(System.String)">
<summary>
 Removes all leading and trailing white-space characters from the string.
</summary>
</member>
<member name="M:Aardvark.Base.String Extensions.String.endsWith(System.String,System.String)">
<summary>
 Returns whether the string ends with the given pattern.
</summary>
</member>
<member name="M:Aardvark.Base.String Extensions.String.startsWith(System.String,System.String)">
<summary>
 Returns whether the string starts with the given pattern.
</summary>
</member>
<member name="M:Aardvark.Base.String Extensions.String.split(System.String,System.String)">
<summary>
 Splits the string into substring based on the separator.
</summary>
</member>
<member name="M:Aardvark.Base.String Extensions.String.toUpper(System.String)">
<summary>
 Returns a copy of the string converted to uppercase.
</summary>
</member>
<member name="M:Aardvark.Base.String Extensions.String.toLower(System.String)">
<summary>
 Returns a copy of the string converted to lowercase.
</summary>
</member>
<member name="M:Aardvark.Base.String Extensions.String.contains(System.String,System.String)">
<summary>
 Returns whether the string contains the given pattern.
</summary>
</member>
<member name="M:Aardvark.Base.String Extensions.String.lineCount(System.String)">
<summary>
 Gets the number of lines in the given string, recognizing various line ending sequences.
</summary>
</member>
<member name="M:Aardvark.Base.String Extensions.String.indent(System.Int32,System.String)">
<summary>
 Indents each line of string by step * 4 spaces.
 Line endings are normalized.
</summary>
</member>
<member name="M:Aardvark.Base.String Extensions.String.withLineNumbers(System.String)">
<summary>
 Adds line number prefixes to the given string.
 Line endings are normalized.
</summary>
</member>
<member name="M:Aardvark.Base.String Extensions.String.normalizeLineEndings(System.String)">
<summary>
 Replaces all newline sequences in the given string with Environment.NewLine.
</summary>
</member>
<member name="M:Aardvark.Base.String Extensions.String.getLines(System.String)">
<summary>
 Splits the string into individual lines, recognizing various line ending sequences.
</summary>
</member>
<member name="M:Aardvark.Base.ArraySegmentModule.sliceFrom``1(System.Int32,System.ArraySegment{``0})">
<summary>
 Forms a slice out of the array segment starting at the specified index.
</summary>
</member>
<member name="M:Aardvark.Base.ArraySegmentModule.slice``1(System.Int32,System.Int32,System.ArraySegment{``0})">
<summary>
 Forms a slice of the specified length out of the array segment starting at the specified index.
</summary>
</member>
<member name="M:Aardvark.Base.ArraySegmentModule.contains``1(``0,System.ArraySegment{``0})">
<summary>
 Tests if the array segment contains the specified element.
</summary>
</member>
<member name="T:Aardvark.Base.Threading.MVar`1">
<summary>
 Please note that Aardvark.Base.FSharp&apos;s MVar implementation is different from Haskell&apos;s MVar introduced in
  &quot;Concurrent Haskell&quot; by Simon Peyton Jones, Andrew Gordon and Sigbjorn Finne.
 see also: http://hackage.haskell.org/package/base-4.11.1.0/docs/Control-Concurrent-MVar.html
 In our &apos;wrong&apos; implementation put does not block but overrides the old value.
 We use it typically for synchronized sampling use cases.
</summary>
</member>
<member name="M:Aardvark.Base.FileModule.readAllBytes(System.String)">
 <summary>
 Opens a binary file, reads the contents of the file into a byte array, and then closes the file.
 </summary>
 <param name="path">The file to open for reading.</param>
 <returns>A byte array containing the contents of the file.</returns>
</member>
<member name="M:Aardvark.Base.FileModule.readAllText(System.String)">
 <summary>
 Opens a text file, reads all the text in the file into a string, and then closes the file.
 </summary>
 <param name="path">The file to open for reading.</param>
 <returns>A string containing all the text in the file.</returns>
</member>
<member name="M:Aardvark.Base.FileModule.readAllLines(System.String)">
 <summary>
 Opens a text file, reads all lines of the file into a string array, and then closes the file.
 </summary>
 <param name="path">The file to open for reading.</param>
 <returns>A string array containing all lines of the file.</returns>
</member>
<member name="M:Aardvark.Base.FileModule.writeAllBytesSafe(System.String,System.Byte[])">
 <summary>
 Creates a new file, writes the specified byte array to the file, and then closes the file.
 If the parent directory does not exist, it is created first.
 </summary>
 <param name="path">The file to write to.</param>
 <param name="bytes">The bytes to write to the file.</param>
</member>
<member name="M:Aardvark.Base.FileModule.writeAllBytes(System.String,System.Byte[])">
 <summary>
 Creates a new file, writes the specified byte array to the file, and then closes the file.
 </summary>
 <param name="path">The file to write to.</param>
 <param name="bytes">The bytes to write to the file.</param>
</member>
<member name="M:Aardvark.Base.FileModule.writeAllTextSafe(System.String,System.String)">
 <summary>
 Creates a new file, writes the specified string to the file, and then closes the file.
 If the parent directory does not exist, it is created first.
 </summary>
 <param name="path">The file to write to.</param>
 <param name="text">The string to write to the file.</param>
</member>
<member name="M:Aardvark.Base.FileModule.writeAllText(System.String,System.String)">
 <summary>
 Creates a new file, writes the specified string to the file, and then closes the file.
 </summary>
 <param name="path">The file to write to.</param>
 <param name="text">The string to write to the file.</param>
</member>
<member name="M:Aardvark.Base.FileModule.writeAllLinesSafe(System.String,System.String[])">
 <summary>
 Creates a new file, writes the specified string array to the file, and then closes the file.
 If the parent directory does not exist, it is created first.
 </summary>
 <param name="path">The file to write to.</param>
 <param name="lines">The lines to write to the file.</param>
</member>
<member name="M:Aardvark.Base.FileModule.writeAllLines(System.String,System.String[])">
 <summary>
 Creates a new file, writes the specified string array to the file, and then closes the file.
 </summary>
 <param name="path">The file to write to.</param>
 <param name="lines">The lines to write to the file.</param>
</member>
<member name="M:Aardvark.Base.FileModule.createParentDirectory(System.String)">
 <summary>
 Creates the parent directory of the given file path, if it does not exist.
 </summary>
 <param name="path">The path of the file, whose parent directory is to be created.</param>
</member>
<member name="M:Aardvark.Base.StreamModule.readAllBytes(System.IO.Stream)">
 <summary>
 Reads the contents of a stream into a byte array.
 </summary>
 <param name="stream">The stream to read.</param>
 <returns>A byte array containing the contents of the stream.</returns>
</member>
<member name="M:Aardvark.Base.PathModule.withoutTrailingSlash(System.String)">
<summary>
 Removes the trailing slash from the given path if it has one.
</summary>
</member>
<member name="M:Aardvark.Base.PathModule.withTrailingSlash(System.String)">
<summary>
 Adds a trailing slash unless the path already has one.
</summary>
</member>
<member name="M:Aardvark.Base.PathModule.normalizeDirectorySeparators(System.String)">
<summary>
 Normalizes the directory separators of the given path, i.e. replaces
 the alternative separator with the default separator.
</summary>
</member>
<member name="M:Aardvark.Base.PathModule.andPath(System.String,System.String)">
<summary>
 Combines two strings into a path.
</summary>
</member>
<member name="M:Aardvark.Base.PathModule.combine(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Combines a sequence of strings into a path.
</summary>
</member>
<member name="M:Aardvark.Base.NativeUtilities.NativeIntModule.pin``1(Microsoft.FSharp.Core.FSharpFunc{System.IntPtr,``0},System.Object)">
<summary>
 Pins the given object and invokes the action with its address.
</summary>
</member>
<member name="T:Aardvark.Base.NativeUtilities.LibC">
 <summary>
 LibC wraps memory-functions provided by libc on linux systems.
 </summary>
</member>
<member name="T:Aardvark.Base.NativeUtilities.MSVCRT">
 <summary>
 MSVCRT wraps memory-functions provided by msvcrt.dll on windows systems.
 </summary>
</member>
<member name="F:Aardvark.Base.PrimitiveValueConverter.InvalidConversionException.Target">
<summary>
 The target type of the requested conversion.
</summary>
</member>
<member name="F:Aardvark.Base.PrimitiveValueConverter.InvalidConversionException.Source">
<summary>
 The source type of the requested conversion.
</summary>
</member>
<member name="T:Aardvark.Base.PrimitiveValueConverter.InvalidConversionException">
<summary>
 Exception thrown when an invalid conversion is requested.
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.approximateEquals``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean}}},``0,``1,``1)">
<summary>
 Returns whether the distance between x and y is not more than epsilon.
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.isFinite``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0)">
<summary>
 Returns whether x is finite (i.e. not NaN and not infinity).
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.isNegativeInfinity``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0)">
<summary>
 Returns whether x is negative infinity.
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.isPositiveInfinity``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0)">
<summary>
 Returns whether x is positive infinity.
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.isInfinity``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0)">
<summary>
 Returns whether x is infinity (positive or negative).
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.isNaN``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0)">
<summary>
 Returns whether x is NaN.
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.madd``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``0}}},``0,``1,``0)">
<summary>
 Returns (x * y) + z
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.radians``1(Microsoft.FSharp.Core.FSharpFunc{``0,``0},``0)">
<summary>
 Converts an angle given in degrees to radians.
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.degrees``1(Microsoft.FSharp.Core.FSharpFunc{``0,``0},``0)">
<summary>
 Converts an angle given in radians to degrees.
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.copysign``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``0}},``0,``1)">
<summary>
 Returns a value with the magnitude of the first argument and the sign of the second argument.
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.smoothstep``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``1}}},``0,``0,``1)">
<summary>
 Performs smooth Hermite interpolation between 0 and 1 when edge0 &lt; x &lt; edge1.
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.linearstep``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``1}}},``0,``0,``1)">
<summary>
 Inverse linear interpolation. Clamped to [0, 1].
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.step``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``0,``1)">
<summary>
 Returns 0 if x &lt; edge, and 1 otherwise.
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.invLerp``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``1}}},``0,``0,``0)">
<summary>
 Inverse linear interpolation. Computes t of y = a * (1 - t) + b * t.
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.lerp``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}}},``0,``0,``1)">
<summary>
 Linearly interpolates between x and y.
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.saturate``1(Microsoft.FSharp.Core.FSharpFunc{``0,``0},``0)">
<summary>
 Clamps x to the interval [0, 1].
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.clamp``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0,``2,``1)">
<summary>
 Clamps x to the interval [a, b].
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.max``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0,``1)">
<summary>
 Returns the larger of x and y.
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.min``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0,``1)">
<summary>
 Returns the smaller of x and y.
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.cbrt``1(Microsoft.FSharp.Core.FSharpFunc{``0,``0},``0)">
<summary>
 Returns the cubic root of x.
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.sqr``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``0)">
<summary>
 Returns x^2
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.atanh``1(Microsoft.FSharp.Core.FSharpFunc{``0,``0},``0)">
<summary>
 Returns the inverse hyperbolic tangent of x.
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.acosh``1(Microsoft.FSharp.Core.FSharpFunc{``0,``0},``0)">
<summary>
 Returns the inverse hyperbolic cosine of x.
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.asinh``1(Microsoft.FSharp.Core.FSharpFunc{``0,``0},``0)">
<summary>
 Returns the inverse hyperbolic sine of x.
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.log2int``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0)">
<summary>
 Returns the base 2 logarithm of x rounded to the next integer towards negative infinity.
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.log2``1(Microsoft.FSharp.Core.FSharpFunc{``0,``0},``0)">
<summary>
 Returns the base 2 logarithm of x.
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.exp2``1(Microsoft.FSharp.Core.FSharpFunc{``0,``0},``0)">
<summary>
 Returns 2 raised to the power of x (must be float, double, or uint64).
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.pown``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``0}},``0,``1)">
<summary>
 Returns x raised to the integer power of y (must not be negative).
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.op_Exponentiation``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``0}},``0,``1)">
<summary>
 Returns x raised to the power of y.
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.pow``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``0}},``0,``1)">
<summary>
 Returns x raised to the power of y (must be float or double).
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.signumi``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0)">
<summary>
 Returns -1 if x is less than zero, 0 if x is equal to zero, and 1 if
 x is greater than zero.
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.signum``1(Microsoft.FSharp.Core.FSharpFunc{``0,``0},``0)">
<summary>
 Returns -1 if x is less than zero, 0 if x is equal to zero, and 1 if
 x is greater than zero. The result has the same type as the input.
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.one``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
<summary>
 Resolves to the one value for any scalar or vector type.
</summary>
</member>
<member name="M:Aardvark.Base.FSharpMath.zero``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
<summary>
 Resolves to the zero value for any scalar or vector type.
</summary>
</member>
<member name="T:Aardvark.Base.FSharpMath">
<summary>
 Provides generic math functions that work for both scalars and vectors (element-wise).
 Functions already provided by the F# core library are only redefined if necessary
 (e.g. different signature)
</summary>
</member>
<member name="M:Aardvark.Base.VecModule.allGreaterOrEqual``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0,``1)">
<summary>
 Returns if a &gt;= b for all components. One or both of a and b have to be a vector.
</summary>
</member>
<member name="M:Aardvark.Base.VecModule.allSmallerOrEqual``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0,``1)">
<summary>
 Returns if a &lt;= b for all components. One or both of a and b have to be a vector.
</summary>
</member>
<member name="M:Aardvark.Base.VecModule.anyGreaterOrEqual``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0,``1)">
<summary>
 Returns if a &gt;= b for any component. One or both of a and b have to be a vector.
</summary>
</member>
<member name="M:Aardvark.Base.VecModule.anySmallerOrEqual``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0,``1)">
<summary>
 Returns if a &lt;= b for any component. One or both of a and b have to be a vector.
</summary>
</member>
<member name="M:Aardvark.Base.VecModule.allGreater``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0,``1)">
<summary>
 Returns if a &gt; b for all components. One or both of a and b have to be a vector.
</summary>
</member>
<member name="M:Aardvark.Base.VecModule.allSmaller``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0,``1)">
<summary>
 Returns if a &lt; b for all components. One or both of a and b have to be a vector.
</summary>
</member>
<member name="M:Aardvark.Base.VecModule.anyGreater``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0,``1)">
<summary>
 Returns if a &gt; b for any component. One or both of a and b have to be a vector.
</summary>
</member>
<member name="M:Aardvark.Base.VecModule.anySmaller``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0,``1)">
<summary>
 Returns if a &lt; b for any component. One or both of a and b have to be a vector.
</summary>
</member>
<member name="M:Aardvark.Base.VecModule.allDifferent``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0,``1)">
<summary>
 Returns if a &lt;&gt; b for all components. One or both of a and b have to be a vector.
</summary>
</member>
<member name="M:Aardvark.Base.VecModule.allEqual``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0,``1)">
<summary>
 Returns if a = b for all components. One or both of a and b have to be a vector.
</summary>
</member>
<member name="M:Aardvark.Base.VecModule.anyDifferent``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0,``1)">
<summary>
 Returns if a &lt;&gt; b for any component. One or both of a and b have to be a vector.
</summary>
</member>
<member name="M:Aardvark.Base.VecModule.anyEqual``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0,``1)">
<summary>
 Returns if a = b for any component. One or both of a and b have to be a vector.
</summary>
</member>
<member name="M:Aardvark.Base.VecModule.yzw``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0)">
<summary>
 Returns the yzw-components of the vector v.
</summary>
</member>
<member name="M:Aardvark.Base.VecModule.xyz``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0)">
<summary>
 Returns the xyz-components of the vector v.
</summary>
</member>
<member name="M:Aardvark.Base.VecModule.zw``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0)">
<summary>
 Returns the zw-components of the vector v.
</summary>
</member>
<member name="M:Aardvark.Base.VecModule.yz``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0)">
<summary>
 Returns the yz-components of the vector v.
</summary>
</member>
<member name="M:Aardvark.Base.VecModule.xy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0)">
<summary>
 Returns the xy-components of the vector v.
</summary>
</member>
<member name="M:Aardvark.Base.VecModule.w``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0)">
<summary>
 Returns the w-component of the vector v.
</summary>
</member>
<member name="M:Aardvark.Base.VecModule.z``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0)">
<summary>
 Returns the z-component of the vector v.
</summary>
</member>
<member name="M:Aardvark.Base.VecModule.y``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0)">
<summary>
 Returns the y-component of the vector v.
</summary>
</member>
<member name="M:Aardvark.Base.VecModule.x``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0)">
<summary>
 Returns the x-component of the vector v.
</summary>
</member>
<member name="M:Aardvark.Base.VecModule.refract``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}}},``0,``1,``1)">
<summary>
 Returns the refraction direction of v for the normal n and ratio of refraction indices eta.
 v and n should be normalized.
</summary>
</member>
<member name="M:Aardvark.Base.VecModule.reflect``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0,``0)">
<summary>
 Returns the reflection direction of v for the normal n (should be normalized).
</summary>
</member>
<member name="M:Aardvark.Base.VecModule.normalize``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0)">
<summary>
 Returns the vector v with unit length.
</summary>
</member>
<member name="M:Aardvark.Base.VecModule.lengthSquared``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0)">
<summary>
 Computes the squared length of the vector v.
</summary>
</member>
<member name="M:Aardvark.Base.VecModule.length``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0)">
<summary>
 Computes the length of the vector v.
</summary>
</member>
<member name="M:Aardvark.Base.VecModule.distanceSquared``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``0,``0)">
<summary>
 Computes the squared distance between a and b
</summary>
</member>
<member name="M:Aardvark.Base.VecModule.distance``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``0,``0)">
<summary>
 Computes the distance between a and b
</summary>
</member>
<member name="M:Aardvark.Base.VecModule.cross``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0,``0)">
<summary>
 Computes the cross product of two 3D vectors a and b.
</summary>
</member>
<member name="M:Aardvark.Base.VecModule.dot``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``0,``0)">
<summary>
 Computes the dot product of two vectors a and b.
</summary>
</member>
<member name="M:Aardvark.Base.TrafoModule.backward``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0)">
<summary>
 Returns the backward matrix of a transformation.
</summary>
</member>
<member name="M:Aardvark.Base.TrafoModule.forward``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0)">
<summary>
 Returns the forward matrix of a transformation.
</summary>
</member>
<member name="M:Aardvark.Base.TrafoModule.inverse``1(Microsoft.FSharp.Core.FSharpFunc{``0,``0},``0)">
<summary>
 Returns the inverse of a transformation.
</summary>
</member>
<member name="M:Aardvark.Base.MatModule.allGreaterOrEqual``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0,``1)">
<summary>
 Returns if a &gt;= b for all components. One or both of a and b have to be a matrix.
</summary>
</member>
<member name="M:Aardvark.Base.MatModule.allSmallerOrEqual``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0,``1)">
<summary>
 Returns if a &lt;= b for all components. One or both of a and b have to be a matrix.
</summary>
</member>
<member name="M:Aardvark.Base.MatModule.anyGreaterOrEqual``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0,``1)">
<summary>
 Returns if a &gt;= b for any component. One or both of a and b have to be a matrix.
</summary>
</member>
<member name="M:Aardvark.Base.MatModule.anySmallerOrEqual``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0,``1)">
<summary>
 Returns if a &lt;= b for any component. One or both of a and b have to be a matrix.
</summary>
</member>
<member name="M:Aardvark.Base.MatModule.allGreater``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0,``1)">
<summary>
 Returns if a &gt; b for all components. One or both of a and b have to be a matrix.
</summary>
</member>
<member name="M:Aardvark.Base.MatModule.allSmaller``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0,``1)">
<summary>
 Returns if a &lt; b for all components. One or both of a and b have to be a matrix.
</summary>
</member>
<member name="M:Aardvark.Base.MatModule.anyGreater``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0,``1)">
<summary>
 Returns if a &gt; b for any component. One or both of a and b have to be a matrix.
</summary>
</member>
<member name="M:Aardvark.Base.MatModule.anySmaller``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0,``1)">
<summary>
 Returns if a &lt; b for any component. One or both of a and b have to be a matrix.
</summary>
</member>
<member name="M:Aardvark.Base.MatModule.allDifferent``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0,``1)">
<summary>
 Returns if a &lt;&gt; b for all components. One or both of a and b have to be a matrix.
</summary>
</member>
<member name="M:Aardvark.Base.MatModule.allEqual``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0,``1)">
<summary>
 Returns if a = b for all components. One or both of a and b have to be a matrix.
</summary>
</member>
<member name="M:Aardvark.Base.MatModule.anyDifferent``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0,``1)">
<summary>
 Returns if a &lt;&gt; b for any component. One or both of a and b have to be a matrix.
</summary>
</member>
<member name="M:Aardvark.Base.MatModule.anyEqual``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0,``1)">
<summary>
 Returns if a = b for any component. One or both of a and b have to be a matrix.
</summary>
</member>
<member name="M:Aardvark.Base.MatModule.transformPosProj``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0,``1)">
<summary>
 Transforms a point vector by a matrix (the last element of the vector is presumed 1).
 Projective transform is performed. Perspective Division is performed.
</summary>
</member>
<member name="M:Aardvark.Base.MatModule.transformDir``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0,``1)">
<summary>
 Transforms a direction vector by a matrix (the last element of the vector is presumed 0)
</summary>
</member>
<member name="M:Aardvark.Base.MatModule.transformPos``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0,``1)">
<summary>
 Transforms a point vector by a matrix (the last element of the vector is presumed 1)
</summary>
</member>
<member name="M:Aardvark.Base.MatModule.transform``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},``0,``1)">
<summary>
 Transforms a vector by a matrix.
</summary>
</member>
<member name="M:Aardvark.Base.MatModule.inverse``1(Microsoft.FSharp.Core.FSharpFunc{``0,``0},``0)">
<summary>
 Returns the inverse of a matrix.
</summary>
</member>
<member name="M:Aardvark.Base.MatModule.det``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0)">
<summary>
 Returns the determinant of a matrix.
</summary>
</member>
<member name="M:Aardvark.Base.MatModule.transpose``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0)">
<summary>
 Returns the transpose of a matrix.
</summary>
</member>
<member name="M:Aardvark.Base.DerivedOrder.Order`1.TryAt(System.Int32)">
<summary>
 gets the n-th time after this one
 NOTE that this only works on representant-nodes
</summary>
</member>
<member name="M:Aardvark.Base.SkipOrder.Order.TryAt(System.Int32)">
<summary>
 gets the n-th time after this one
 NOTE that this only works on representant-nodes
</summary>
</member>
<member name="M:Aardvark.Base.AVLModule.runTests">
 <summary>
 runs a randomized series of additions / removals on a tree and 
 validates its correctness, completeness, order and internal cache-values.
 </summary>
</member>
<member name="M:Aardvark.Base.AVLModule.print``1(Aardvark.Base.AVLModule.Tree{``0})">
 <summary>
 prints the tree to the console for debugging purposes.
 </summary>
</member>
<member name="M:Aardvark.Base.AVLModule.find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32},Aardvark.Base.AVLModule.Tree{``0})">
 <summary>
 finds a value using a partially applied comparison function.
 the given function must perform comparison like: compare(myValue, treeValue).
 returns the (optional) value found
 Runtime: O(log(N))
 </summary>
</member>
<member name="M:Aardvark.Base.AVLModule.extractMaximalWhere``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Aardvark.Base.AVLModule.Tree{``0})">
 <summary>
 finds and removes the maximum value from the tree for which the given condition holds. 
 it is assumed that this condition is transitive with respect to the given comparison function.
 returns the (optional) value found in the tree.
 Example: extractMaximalWhere (fun v -> v > 10) gives the maximal value in the tree being greater than 10.
 Runtime: O(log(N))
</summary>
</member>
<member name="M:Aardvark.Base.AVLModule.extractMinimalWhere``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Aardvark.Base.AVLModule.Tree{``0})">
 <summary>
 finds and removes the minimal value from the tree for which the given condition holds. 
 it is assumed that this condition is transitive with respect to the given comparison function.
 returns the (optional) value found in the tree.
 Example: extractMinimalWhere (fun v -> v > 10) gives the minimal value in the tree being greater than 10.
 Runtime: O(log(N))
</summary>
</member>
<member name="M:Aardvark.Base.AVLModule.toList``1(Aardvark.Base.AVLModule.Tree{``0})">
 <summary>
 creates a list containing all the elements in the tree.
 the list is ascendingly sorted with respect to the given comparison function.
 Runtime: O(N)
 </summary>
</member>
<member name="M:Aardvark.Base.AVLModule.toSeq``1(Aardvark.Base.AVLModule.Tree{``0})">
 <summary>
 creates a sequence containing all the elements in the tree.
 the sequence is ascendingly sorted with respect to the given comparison function.
 Runtime: O(1) [Note that traversing the entire sequence is of course in O(N)]
 </summary>
</member>
<member name="M:Aardvark.Base.AVLModule.removeCmp``1(Aardvark.Base.AVLModule.Tree{``0},Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32})">
 <summary>
 removes a value using a partially applied comparison function.
 the given function must perform comparison like: compare(myValue, treeValue).
 returns true if the element was found and false otherwise
 Runtime: O(log(N))
 </summary>
</member>
<member name="M:Aardvark.Base.AVLModule.remove'``1(Aardvark.Base.AVLModule.Tree{``0},``0)">
 <summary>
 removes a value from the tree if present.
 Runtime: O(log(N))
 </summary>
</member>
<member name="M:Aardvark.Base.AVLModule.remove``1(Aardvark.Base.AVLModule.Tree{``0},``0)">
 <summary>
 removes a value from the tree and returns true if the value was found.
 Runtime: O(log(N))
 </summary>
</member>
<member name="M:Aardvark.Base.AVLModule.insert'``1(Aardvark.Base.AVLModule.Tree{``0},``0)">
 <summary>
 inserts a new value into the tree if not already present.
 Runtime: O(log(N))
 </summary>
</member>
<member name="M:Aardvark.Base.AVLModule.insert``1(Aardvark.Base.AVLModule.Tree{``0},``0)">
 <summary>
 inserts a new value into the tree and returns true if the value was
 not already present in the tree. 
 Runtime: O(log(N))
 </summary>
</member>
<member name="M:Aardvark.Base.AVLModule.empty``1">
 <summary>
 creates a new empty AVL-Tree using the default comparison function
 </summary>
</member>
<member name="M:Aardvark.Base.AVLModule.custom``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}})">
 <summary>
 creates a new empty AVL-Tree using the given comparison function
 note that the given function must define a total order and may only 
 return {-1,0,1}. Futhermore cmp(a,b) = 0 must be equivalent to a = b.
 </summary>
</member>
<member name="P:Aardvark.Base.MapExtImplementation.MapTreeModule.MapIterator`2.started">
<summary>
 true when MoveNext has been called   
</summary>
</member>
<member name="P:Aardvark.Base.MapExtImplementation.MapTreeModule.MapIterator`2.stack">
<summary>
 invariant: always collapseLHS result 
</summary>
</member>
<member name="T:Aardvark.Base.MapExtImplementation.MapTreeModule.MapIterator`2">
<summary>
 Imperative left-to-right iterators.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ulModule.toArray(Aardvark.Base.RangeSet1ul)">
<summary>
 Builds an array from the range set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ulModule.toList(Aardvark.Base.RangeSet1ul)">
<summary>
 Builds a list from the range set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ulModule.toSeq(Aardvark.Base.RangeSet1ul)">
<summary>
 Views the range set as a sequence.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ulModule.isEmpty(Aardvark.Base.RangeSet1ul)">
<summary>
 Returns whether the set is empty.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ulModule.count(Aardvark.Base.RangeSet1ul)">
<summary>
 Returns the number of disjoint ranges in the set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ulModule.containsRange(Aardvark.Base.Range1ul,Aardvark.Base.RangeSet1ul)">
<summary>
 Returns whether the given range is contained in the set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ulModule.contains(System.UInt64,Aardvark.Base.RangeSet1ul)">
<summary>
 Returns whether the given value is contained in the range set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ulModule.intersect(Aardvark.Base.Range1ul,Aardvark.Base.RangeSet1ul)">
<summary>
 Returns the intersection of the set with the given range.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ulModule.union(Aardvark.Base.RangeSet1ul,Aardvark.Base.RangeSet1ul)">
<summary>
 Returns the union of two sets.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ulModule.remove(Aardvark.Base.Range1ul,Aardvark.Base.RangeSet1ul)">
<summary>
 Removes the given range from the set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ulModule.add(Aardvark.Base.Range1ul,Aardvark.Base.RangeSet1ul)">
<summary>
 Adds the given range to the set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ulModule.ofSeq(System.Collections.Generic.IEnumerable{Aardvark.Base.Range1ul})">
<summary>
 Builds a range set of the given sequence of ranges.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ulModule.ofArray(Aardvark.Base.Range1ul[])">
<summary>
 Builds a range set of the given array of ranges.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ulModule.ofList(Microsoft.FSharp.Collections.FSharpList{Aardvark.Base.Range1ul})">
<summary>
 Builds a range set of the given list of ranges.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ulModule.range(Aardvark.Base.RangeSet1ul)">
<summary>
 Returns the total range spanned by the range set, i.e. [min, max].
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ulModule.max(Aardvark.Base.RangeSet1ul)">
<summary>
 Returns the maximum value in the range set or UInt64.MinValue if the range is empty.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1ulModule.min(Aardvark.Base.RangeSet1ul)">
<summary>
 Returns the minimum value in the range set or UInt64.MaxValue if the range is empty.
</summary>
</member>
<member name="P:Aardvark.Base.RangeSet1ulModule.empty">
<summary>
 Empty range set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1lModule.toArray(Aardvark.Base.RangeSet1l)">
<summary>
 Builds an array from the range set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1lModule.toList(Aardvark.Base.RangeSet1l)">
<summary>
 Builds a list from the range set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1lModule.toSeq(Aardvark.Base.RangeSet1l)">
<summary>
 Views the range set as a sequence.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1lModule.isEmpty(Aardvark.Base.RangeSet1l)">
<summary>
 Returns whether the set is empty.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1lModule.count(Aardvark.Base.RangeSet1l)">
<summary>
 Returns the number of disjoint ranges in the set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1lModule.containsRange(Aardvark.Base.Range1l,Aardvark.Base.RangeSet1l)">
<summary>
 Returns whether the given range is contained in the set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1lModule.contains(System.Int64,Aardvark.Base.RangeSet1l)">
<summary>
 Returns whether the given value is contained in the range set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1lModule.intersect(Aardvark.Base.Range1l,Aardvark.Base.RangeSet1l)">
<summary>
 Returns the intersection of the set with the given range.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1lModule.union(Aardvark.Base.RangeSet1l,Aardvark.Base.RangeSet1l)">
<summary>
 Returns the union of two sets.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1lModule.remove(Aardvark.Base.Range1l,Aardvark.Base.RangeSet1l)">
<summary>
 Removes the given range from the set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1lModule.add(Aardvark.Base.Range1l,Aardvark.Base.RangeSet1l)">
<summary>
 Adds the given range to the set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1lModule.ofSeq(System.Collections.Generic.IEnumerable{Aardvark.Base.Range1l})">
<summary>
 Builds a range set of the given sequence of ranges.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1lModule.ofArray(Aardvark.Base.Range1l[])">
<summary>
 Builds a range set of the given array of ranges.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1lModule.ofList(Microsoft.FSharp.Collections.FSharpList{Aardvark.Base.Range1l})">
<summary>
 Builds a range set of the given list of ranges.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1lModule.range(Aardvark.Base.RangeSet1l)">
<summary>
 Returns the total range spanned by the range set, i.e. [min, max].
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1lModule.max(Aardvark.Base.RangeSet1l)">
<summary>
 Returns the maximum value in the range set or Int64.MinValue if the range is empty.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1lModule.min(Aardvark.Base.RangeSet1l)">
<summary>
 Returns the minimum value in the range set or Int64.MaxValue if the range is empty.
</summary>
</member>
<member name="P:Aardvark.Base.RangeSet1lModule.empty">
<summary>
 Empty range set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1uiModule.toArray(Aardvark.Base.RangeSet1ui)">
<summary>
 Builds an array from the range set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1uiModule.toList(Aardvark.Base.RangeSet1ui)">
<summary>
 Builds a list from the range set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1uiModule.toSeq(Aardvark.Base.RangeSet1ui)">
<summary>
 Views the range set as a sequence.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1uiModule.isEmpty(Aardvark.Base.RangeSet1ui)">
<summary>
 Returns whether the set is empty.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1uiModule.count(Aardvark.Base.RangeSet1ui)">
<summary>
 Returns the number of disjoint ranges in the set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1uiModule.containsRange(Aardvark.Base.Range1ui,Aardvark.Base.RangeSet1ui)">
<summary>
 Returns whether the given range is contained in the set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1uiModule.contains(System.UInt32,Aardvark.Base.RangeSet1ui)">
<summary>
 Returns whether the given value is contained in the range set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1uiModule.intersect(Aardvark.Base.Range1ui,Aardvark.Base.RangeSet1ui)">
<summary>
 Returns the intersection of the set with the given range.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1uiModule.union(Aardvark.Base.RangeSet1ui,Aardvark.Base.RangeSet1ui)">
<summary>
 Returns the union of two sets.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1uiModule.remove(Aardvark.Base.Range1ui,Aardvark.Base.RangeSet1ui)">
<summary>
 Removes the given range from the set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1uiModule.add(Aardvark.Base.Range1ui,Aardvark.Base.RangeSet1ui)">
<summary>
 Adds the given range to the set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1uiModule.ofSeq(System.Collections.Generic.IEnumerable{Aardvark.Base.Range1ui})">
<summary>
 Builds a range set of the given sequence of ranges.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1uiModule.ofArray(Aardvark.Base.Range1ui[])">
<summary>
 Builds a range set of the given array of ranges.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1uiModule.ofList(Microsoft.FSharp.Collections.FSharpList{Aardvark.Base.Range1ui})">
<summary>
 Builds a range set of the given list of ranges.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1uiModule.range(Aardvark.Base.RangeSet1ui)">
<summary>
 Returns the total range spanned by the range set, i.e. [min, max].
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1uiModule.max(Aardvark.Base.RangeSet1ui)">
<summary>
 Returns the maximum value in the range set or UInt32.MinValue if the range is empty.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1uiModule.min(Aardvark.Base.RangeSet1ui)">
<summary>
 Returns the minimum value in the range set or UInt32.MaxValue if the range is empty.
</summary>
</member>
<member name="P:Aardvark.Base.RangeSet1uiModule.empty">
<summary>
 Empty range set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1iModule.toArray(Aardvark.Base.RangeSet1i)">
<summary>
 Builds an array from the range set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1iModule.toList(Aardvark.Base.RangeSet1i)">
<summary>
 Builds a list from the range set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1iModule.toSeq(Aardvark.Base.RangeSet1i)">
<summary>
 Views the range set as a sequence.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1iModule.isEmpty(Aardvark.Base.RangeSet1i)">
<summary>
 Returns whether the set is empty.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1iModule.count(Aardvark.Base.RangeSet1i)">
<summary>
 Returns the number of disjoint ranges in the set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1iModule.containsRange(Aardvark.Base.Range1i,Aardvark.Base.RangeSet1i)">
<summary>
 Returns whether the given range is contained in the set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1iModule.contains(System.Int32,Aardvark.Base.RangeSet1i)">
<summary>
 Returns whether the given value is contained in the range set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1iModule.intersect(Aardvark.Base.Range1i,Aardvark.Base.RangeSet1i)">
<summary>
 Returns the intersection of the set with the given range.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1iModule.union(Aardvark.Base.RangeSet1i,Aardvark.Base.RangeSet1i)">
<summary>
 Returns the union of two sets.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1iModule.remove(Aardvark.Base.Range1i,Aardvark.Base.RangeSet1i)">
<summary>
 Removes the given range from the set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1iModule.add(Aardvark.Base.Range1i,Aardvark.Base.RangeSet1i)">
<summary>
 Adds the given range to the set.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1iModule.ofSeq(System.Collections.Generic.IEnumerable{Aardvark.Base.Range1i})">
<summary>
 Builds a range set of the given sequence of ranges.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1iModule.ofArray(Aardvark.Base.Range1i[])">
<summary>
 Builds a range set of the given array of ranges.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1iModule.ofList(Microsoft.FSharp.Collections.FSharpList{Aardvark.Base.Range1i})">
<summary>
 Builds a range set of the given list of ranges.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1iModule.range(Aardvark.Base.RangeSet1i)">
<summary>
 Returns the total range spanned by the range set, i.e. [min, max].
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1iModule.max(Aardvark.Base.RangeSet1i)">
<summary>
 Returns the maximum value in the range set or Int32.MinValue if the range is empty.
</summary>
</member>
<member name="M:Aardvark.Base.RangeSet1iModule.min(Aardvark.Base.RangeSet1i)">
<summary>
 Returns the minimum value in the range set or Int32.MaxValue if the range is empty.
</summary>
</member>
<member name="P:Aardvark.Base.RangeSet1iModule.empty">
<summary>
 Empty range set.
</summary>
</member>
<member name="P:Aardvark.Base.ColorBrewer.Scheme.Palettes">
<summary>
 The palettes of the scheme according to their size.
</summary>
</member>
<member name="P:Aardvark.Base.ColorBrewer.Scheme.Type">
<summary>
 Type of the scheme.
</summary>
</member>
<member name="P:Aardvark.Base.ColorBrewer.Scheme.Name">
<summary>
 Name of the scheme.
</summary>
</member>
<member name="P:Aardvark.Base.ColorBrewer.Scheme.MinSize">
<summary>
 Size of the smallest palette.
</summary>
</member>
<member name="P:Aardvark.Base.ColorBrewer.Scheme.MaxSize">
<summary>
 Size of the largest palette.
</summary>
</member>
<member name="P:Aardvark.Base.ColorBrewer.Scheme.IsEmpty">
<summary>
 Returns whether the scheme is empty (i.e. has no palettes).
</summary>
</member>
<member name="M:Aardvark.Base.ColorBrewer.Scheme.Item(System.Int32)">
<summary>
 Gets the palette with the given size.
 If the scheme is not defined for the requested size, gets the next larger palette.
 Throws an exception if the requested size is greater than the maximum size.
</summary>
</member>
<member name="T:Aardvark.Base.ColorBrewer.Scheme">
<summary>
 A color scheme containing palettes of various size.
</summary>
</member>
<member name="F:Aardvark.Base.ColorBrewer.SchemeType.Sequential">
<summary>
 Sequential schemes are suited to ordered data that progress from low to high.
 Lightness steps dominate the look of these schemes, with light colors for low data values to dark colors for high data values.
</summary>
</member>
<member name="F:Aardvark.Base.ColorBrewer.SchemeType.Qualitative">
<summary>
 Qualitative schemes do not imply magnitude differences between legend classes, and hues are used to
 create the primary visual differences between classes. Qualitative schemes are best suited to representing nominal or categorical data.
</summary>
</member>
<member name="F:Aardvark.Base.ColorBrewer.SchemeType.Diverging">
<summary>
 Diverging schemes put equal emphasis on mid-range critical values and extremes at both ends of the data range.
 The critical class or break in the middle of the legend is emphasized with light colors and low and high extremes are
 emphasized with dark colors that have contrasting hues.
</summary>
</member>
<member name="P:Aardvark.Base.ColorBrewer.Palette.Usage">
<summary>
 Usage properties of the palette.
</summary>
</member>
<member name="P:Aardvark.Base.ColorBrewer.Palette.Colors">
<summary>
 The color values of the palette.
</summary>
</member>
<member name="F:Aardvark.Base.ColorBrewer.PaletteUsage.PhotoCopy">
<summary>
 Withstands black and white photocopying.
 Diverging schemes can not be photocopied successfully.
 Differences in lightness should be preserved with sequential schemes.
</summary>
</member>
<member name="F:Aardvark.Base.ColorBrewer.PaletteUsage.LCD">
<summary>
 Suitable for viewing on a laptop LCD display.
 Small, portable LCD monitors tend to wash-out colors which results in noticeable differences from computer-to-computer.
</summary>
</member>
<member name="F:Aardvark.Base.ColorBrewer.PaletteUsage.Print">
<summary>
 Suitable for desktop color printing.
</summary>
</member>
<member name="F:Aardvark.Base.ColorBrewer.PaletteUsage.ColorBlind">
<summary>
 Does not confuse people with red-green color blindness.
</summary>
</member>
<member name="M:Aardvark.Base.ColorBrewer.SchemeModule.filterUsage(Aardvark.Base.ColorBrewer.PaletteUsage,Aardvark.Base.ColorBrewer.Scheme)">
<summary>
 Returns a new scheme containing only the palettes with the given usage flags.
</summary>
</member>
<member name="M:Aardvark.Base.ColorBrewer.SchemeModule.filter(Microsoft.FSharp.Core.FSharpFunc{Aardvark.Base.ColorBrewer.Palette,System.Boolean},Aardvark.Base.ColorBrewer.Scheme)">
<summary>
 Returns a new scheme containing only the palettes for which the predicate returns true.
</summary>
</member>
<member name="M:Aardvark.Base.ColorBrewer.SchemeModule.getPalette(System.Int32,Aardvark.Base.ColorBrewer.Scheme)">
<summary>
 Gets the palette with the given size.
 If the scheme is not defined for the requested size, gets the next larger palette.
 Throws an exception if the requested size is greater than the maximum size.
</summary>
</member>
<member name="M:Aardvark.Base.ColorBrewer.SchemeModule.maxSize(Aardvark.Base.ColorBrewer.Scheme)">
<summary>
 Return the size of the largest palette for the given scheme.
</summary>
</member>
<member name="M:Aardvark.Base.ColorBrewer.SchemeModule.minSize(Aardvark.Base.ColorBrewer.Scheme)">
<summary>
 Return the size of the smallest palette for the given scheme.
</summary>
</member>
<member name="M:Aardvark.Base.ColorBrewer.SchemeModule.isEmpty(Aardvark.Base.ColorBrewer.Scheme)">
<summary>
 Returns whether the scheme is empty (i.e. has no palettes).
</summary>
</member>
<member name="T:Aardvark.Base.ColorBrewer">
<summary>
 Brewer color schemes designed for choropleth map visualizations.
</summary>
</member>
<member name="P:Aardvark.Base.ColorBrewerSchemes.ColorBrewer.Scheme.All">
<summary>
 Array of all available color schemes.
</summary>
</member>
<member name="T:Aardvark.Base.ColorBrewerSchemes.ColorBrewer.Scheme.Sequential">
<summary>
 Sequential schemes are suited to ordered data that progress from low to high.
 Lightness steps dominate the look of these schemes, with light colors for low data values to dark colors for high data values.
</summary>
</member>
<member name="T:Aardvark.Base.ColorBrewerSchemes.ColorBrewer.Scheme.Qualitative">
<summary>
 Qualitative schemes do not imply magnitude differences between legend classes, and hues are used to
 create the primary visual differences between classes. Qualitative schemes are best suited to representing nominal or categorical data.
</summary>
</member>
<member name="T:Aardvark.Base.ColorBrewerSchemes.ColorBrewer.Scheme.Diverging">
<summary>
 Diverging schemes put equal emphasis on mid-range critical values and extremes at both ends of the data range.
 The critical class or break in the middle of the legend is emphasized with light colors and low and high extremes are
 emphasized with dark colors that have contrasting hues.
</summary>
</member>
<member name="T:Aardvark.Base.ColorBrewerSchemes.ColorBrewer">
<summary>
 Brewer color schemes designed for choropleth map visualizations.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|EnumerableOf|_|(System.Type)">
<summary>
 Determines if the given type supports the IEnumerable&lt;&apos;T&gt; interface.
 Returns the underlying type.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|SeqOf|_|(System.Type)">
<summary>
 Determines if the given type is a sequence type.
 Returns the underlying type.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|ArrOf|_|(System.Type)">
<summary>
 Determines if the given type is an Arr type.
 Returns the dimension and the underlying type.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|ArrayOf|_|(System.Type)">
<summary>
 Determines if the given type is an array type.
 Returns the underlying type.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|ListOf|_|(System.Type)">
<summary>
 Determines if the given type is a list type.
 Returns the underlying type.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|RefOf|_|(System.Type)">
<summary>
 Determines if the given type is a reference type.
 Returns the underlying type.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|MatrixOf|_|(System.Type)">
<summary>
 Determines if the given type is a matrix type.
 Returns the dimension (columns, rows) and the underlying type.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|ColorOf|_|(System.Type)">
<summary>
 Determines if the given type is a color type.
 Returns the dimension and the underlying type.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|VectorOf|_|(System.Type)">
<summary>
 Determines if the given type is a vector type.
 Returns the dimension and the underlying type.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|Matrix|_|(System.Type)">
<summary>
 Determines if the given type is a matrix type.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|Color|_|(System.Type)">
<summary>
 Determines if the given type is a color type.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|Vector|_|(System.Type)">
<summary>
 Determines if the given type is a vector type.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|Numeric|_|(System.Type)">
<summary>
 Determines if the given type is a numeric type (i.e. half, float, double, decimal, or an integral type).
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|Fractional|_|(System.Type)">
<summary>
 Determines if the given type is half, float, double, or decimal.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|Integral|_|(System.Type)">
<summary>
 Determines if the given type is an integral type.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|Enum|_|(System.Type)">
<summary>
 Determines if the given type is an enumeration.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|Unit|_|(System.Type)">
<summary>
 Determines if the given type is unit.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|IntPtr|_|(System.Type)">
<summary>
 Determines if the given type is a IntPtr.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|String|_|(System.Type)">
<summary>
 Determines if the given type is a string.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|Char|_|(System.Type)">
<summary>
 Determines if the given type is a char.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|Decimal|_|(System.Type)">
<summary>
 Determines if the given type is a decimal.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|Float16|_|(System.Type)">
<summary>
 Determines if the given type is a float16.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|Float64|_|(System.Type)">
<summary>
 Determines if the given type is a float.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|Float32|_|(System.Type)">
<summary>
 Determines if the given type is a float32.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|UInt64|_|(System.Type)">
<summary>
 Determines if the given type is a uint64.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|Int64|_|(System.Type)">
<summary>
 Determines if the given type is a int64.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|UInt32|_|(System.Type)">
<summary>
 Determines if the given type is a uint32.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|Int32|_|(System.Type)">
<summary>
 Determines if the given type is a int32.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|UInt16|_|(System.Type)">
<summary>
 Determines if the given type is a uint16.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|Int16|_|(System.Type)">
<summary>
 Determines if the given type is a int16.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|Int8|_|(System.Type)">
<summary>
 Determines if the given type is a int8.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|UInt8|_|(System.Type)">
<summary>
 Determines if the given type is a uint8.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.Patterns.|Bool|_|(System.Type)">
<summary>
 Determines if the given type is a bool.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.MatrixTypeModule.get(System.Type,Aardvark.Base.V2i)">
<summary>
 Gets the matrix type of the given field type and dimension.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.MatrixTypeModule.tryGet(System.Type,Aardvark.Base.V2i)">
<summary>
 Tries to get the matrix type of the given field type and dimension.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.MatrixTypeModule.tryGetV(System.Type,Aardvark.Base.V2i)">
<summary>
 Tries to get the matrix type of the given field type and dimension.
</summary>
</member>
<member name="P:Aardvark.Base.TypeMeta.MatrixTypeModule.all">
<summary>
 List of all supported matrix types.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.ColorTypeModule.get(System.Type,System.Int32)">
<summary>
 Gets the color type of the given field type and dimension.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.ColorTypeModule.tryGet(System.Type,System.Int32)">
<summary>
 Tries to get the color type of the given field type and dimension.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.ColorTypeModule.tryGetV(System.Type,System.Int32)">
<summary>
 Tries to get the color type of the given field type and dimension.
</summary>
</member>
<member name="P:Aardvark.Base.TypeMeta.ColorTypeModule.all">
<summary>
 List of all supported color types.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.VectorTypeModule.get(System.Type,System.Int32)">
<summary>
 Gets the vector type of the given field type and dimension.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.VectorTypeModule.tryGet(System.Type,System.Int32)">
<summary>
 Tries to get the vector type of the given field type and dimension.
</summary>
</member>
<member name="M:Aardvark.Base.TypeMeta.VectorTypeModule.tryGetV(System.Type,System.Int32)">
<summary>
 Tries to get the vector type of the given field type and dimension.
</summary>
</member>
<member name="P:Aardvark.Base.TypeMeta.VectorTypeModule.all">
<summary>
 List of all supported vector types.
</summary>
</member>
<member name="T:Aardvark.Base.TypeMeta">
<summary>
 Contains metadata associated with types and provides active patterns for deconstructing types.
</summary>
</member>
<member name="T:Aardvark.Base.TypeInfo">
 <summary>
 TypeInfo contains metadata associated with types and provides active patterns
 deconstructing vector/matrix types etc.
 </summary>
</member>
<member name="M:Aardvark.Base.QuotationReflectionHelpers.getMethodInfo(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>
 extracts the top-most method-call from an expression.
 When no method-call is found the method will raise an exception
 </summary>
 <param name="e"></param>
</member>
<member name="T:Aardvark.Base.FunctionReflection">
 <summary>
 FunctionReflection provides functions wrapping MethodInfos as F# functions efficiently.
 It also allows to create n-ary functions using an untyped implementation.
 </summary>
</member>
<member name="P:Aardvark.Base.Printf.FormatString.NotSpecifiedValue">
<summary>
 Used for width and precision to denote that corresponding value was omitted in format string
</summary>
</member>
<member name="P:Aardvark.Base.Printf.FormatString.StarValue">
<summary>
 Used for width and precision to denote that user has specified &apos;*&apos; flag
</summary>
</member>
<member name="T:Aardvark.Base.UnmanagedFunctions">
 <summary>
 UnmanagedFunctions allows to wrap function pointers as F# functions efficiently.
 Since MethodInfo.Invoke is extremely slow it uses compiled Linq-Expressions here.
 </summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.unboxAny(System.Type)">
<summary>
 unboxes the top-most value to the given type
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.unbox(System.Type)">
<summary>
 unboxes the top-most value (with the given type) to its unboxed representation
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.stobj(System.Type)">
<summary>
 stores the top-most value (with the given type) in a ptr on the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.stloc(Aardvark.Base.IL.Local)">
<summary>
 stores the top-most value in the local variable
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.stind(Aardvark.Base.IL.ValueType)">
<summary>
 stores the top-most value in a ref on the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.stfld(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 stores the top-most value in the field
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.stfld(System.Reflection.FieldInfo)">
<summary>
 stores the top-most value in the field
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.stelem(System.Type)">
<summary>
 stores the element (with the given type) to the array on the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.starg(System.Int32)">
<summary>
 stores the top-most value in the argument with the given index
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.println(System.String,System.Object[])">
<summary>
 prints a log-line using the given local values
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.printfn``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,Aardvark.Base.StringFormat,Microsoft.FSharp.Core.FSharpFunc{Aardvark.Base.IL.Frontend.CodeGenState,System.Tuple{Aardvark.Base.IL.Frontend.CodeGenState,Microsoft.FSharp.Core.Unit}}})">
<summary>
 prints a log-line using the given local values
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.newobj(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 creates a new object by calling the given Constructor
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.newobj(System.Reflection.ConstructorInfo)">
<summary>
 creates a new object by calling the given Constructor
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.newarr(System.Type)">
<summary>
 creates a new array using the given element-type and the length on the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.mark(Aardvark.Base.IL.Label)">
<summary>
 marks the current location using the given label
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.ldtoken(System.Type)">
<summary>
 load the given type-token onto the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.ldtoken(System.Object)">
<summary>
 load the given object as token onto the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.ldobj(System.Type)">
<summary>
 loads the object (with the given type) from the pointer currently on the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.ldloca(Aardvark.Base.IL.Local)">
<summary>
 load the address of the local variable onto the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.ldloc(Aardvark.Base.IL.Local)">
<summary>
 loads the local variable onto the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.ldind(Aardvark.Base.IL.ValueType)">
<summary>
 loads the value from a ref on the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.ldflda(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 loads the address of the field onto the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.ldflda(System.Reflection.FieldInfo)">
<summary>
 loads the address of the field onto the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.ldfld(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 loads the value of the field onto the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.ldfld(System.Reflection.FieldInfo)">
<summary>
 loads the value of the field onto the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.ldelem(System.Type)">
<summary>
 loads an element (with the given type) from the array on the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.ldconst(System.String)">
<summary>
 loads the given string constant onto the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.ldconst(System.Double)">
<summary>
 loads the given double constant onto the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.ldconst(System.Single)">
<summary>
 loads the given float constant onto the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.ldconst(System.UIntPtr)">
<summary>
 loads the given unativeint constant onto the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.ldconst(System.IntPtr)">
<summary>
 loads the given nativeint constant onto the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.ldconst(System.UInt64)">
<summary>
 loads the given uint64 constant onto the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.ldconst(System.Int64)">
<summary>
 loads the given int64 constant onto the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.ldconst(System.UInt32)">
<summary>
 loads the given uint32 constant onto the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.ldconst(System.Int32)">
<summary>
 loads the given int constant onto the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.ldconst(System.UInt16)">
<summary>
 loads the given uint16 constant onto the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.ldconst(System.Int16)">
<summary>
 loads the given int16 constant onto the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.ldconst(System.Byte)">
<summary>
 loads the given uint8 constant onto the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.ldconst(System.SByte)">
<summary>
 loads the given int8 constant onto the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.ldconst(Aardvark.Base.IL.Constant)">
<summary>
 loads the given Constant onto the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.ldarga(System.Int32)">
<summary>
 loads the address of the argument with the given index onto the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.ldarg(System.Int32)">
<summary>
 loads the argument with the given index onto the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.jmp(Aardvark.Base.IL.Label)">
<summary>
 jumps to a label
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.jmp(Aardvark.Base.IL.JumpCondition)">
<summary>
 conditionally jumps to a label
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.isinst(System.Type)">
<summary>
 checks if the top-most value is an instance of the given type
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.initobj(System.Type)">
<summary>
 creates a new uninitialized object
</summary>
</member>
<member name="P:Aardvark.Base.IL.Frontend.IL.tail">
<summary>
 tells the JITer that the following call is a tail-call
</summary>
</member>
<member name="P:Aardvark.Base.IL.Frontend.IL.ret">
<summary>
 returns from the current function
</summary>
</member>
<member name="P:Aardvark.Base.IL.Frontend.IL.pop">
<summary>
 pops the top-most value from the stack
</summary>
</member>
<member name="P:Aardvark.Base.IL.Frontend.IL.nop">
<summary>
 nop
</summary>
</member>
<member name="P:Aardvark.Base.IL.Frontend.IL.ldnull">
<summary>
 loads null onto the stack
</summary>
</member>
<member name="P:Aardvark.Base.IL.Frontend.IL.ldlen">
<summary>
 loads the length of the array currently on the stack
</summary>
</member>
<member name="P:Aardvark.Base.IL.Frontend.IL.dup">
<summary>
 duplicates the top-most value on the stack
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.cpobj(System.Type)">
<summary>
 TODO
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.convChecked(Aardvark.Base.IL.ValueType)">
<summary>
 converts the top-most value to the given type (checked)
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.conv(Aardvark.Base.IL.ValueType)">
<summary>
 converts the top-most value to the given type
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.castclass(System.Type)">
<summary>
 casts the top-most value to the given class
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.call(System.Reflection.MethodBase)">
<summary>
 calls the given MethodInfo
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.call(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 calls the given MethodInfo
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.IL.box(System.Type)">
<summary>
 boxes the top-most value (with the given type) to an object
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.ILLogModule.stop">
<summary>
 prints a log-line using the given local values
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.ILLogModule.startTimed``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,Aardvark.Base.StringFormat,Microsoft.FSharp.Core.FSharpFunc{Aardvark.Base.IL.Frontend.CodeGenState,System.Tuple{Aardvark.Base.IL.Frontend.CodeGenState,Microsoft.FSharp.Core.Unit}}})">
<summary>
 prints a log-line using the given local values
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.ILLogModule.start``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,Aardvark.Base.StringFormat,Microsoft.FSharp.Core.FSharpFunc{Aardvark.Base.IL.Frontend.CodeGenState,System.Tuple{Aardvark.Base.IL.Frontend.CodeGenState,Microsoft.FSharp.Core.Unit}}})">
<summary>
 prints a log-line using the given local values
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.ILLogModule.line``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,Aardvark.Base.StringFormat,Microsoft.FSharp.Core.FSharpFunc{Aardvark.Base.IL.Frontend.CodeGenState,System.Tuple{Aardvark.Base.IL.Frontend.CodeGenState,Microsoft.FSharp.Core.Unit}}})">
<summary>
 prints a log-line using the given local values
</summary>
</member>
<member name="M:Aardvark.Base.IL.Frontend.ILLogModule.print(System.Reflection.MethodInfo,System.String,System.Object[])">
<summary>
 prints a log-line using the given local values
</summary>
</member>
<member name="T:Aardvark.Base.ReflectionPatterns">
 <summary>
 Defines a number of active patterns for matching expressions. Includes some
 functionality missing in F#.
 </summary>
</member>
<member name="T:Aardvark.Base.DynamicLinker">
 <summary>
 DynamicLinker provides platform independent functions for loading libraries and
 resolving function-pointers within those libraries.
 Note that MacOSX is currently not supported
 </summary>
</member>
<member name="T:Aardvark.Base.DynamicLinkerTypes">
 <summary>
 Declares the basic interface for a dynamic linker provided by the OS.
 </summary>
</member>
<member name="P:Aardvark.Base.Ag.Scope.Root">
<summary>
 the root scope
</summary>
</member>
<member name="M:Aardvark.Base.Ag.Scope.SetGlobalValue``1(``0,System.String,System.Object)">
<summary>
 attach a global inherited value to a node (overrides any other inheritance mechanisms).
</summary>
</member>
<member name="M:Aardvark.Base.Ag.Scope.GetChildScope``1(``0)">
<summary>
 get a (possibly cached) child scope for the given node
</summary>
</member>
</members>
</doc>
